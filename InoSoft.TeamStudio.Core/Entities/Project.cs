//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace InoSoft.TeamStudio.Core.Entities
{
    public partial class Project
    {
        #region Primitive Properties
    
        public virtual int ProjectId
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual int TeamId
        {
            get { return _teamId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_teamId != value)
                    {
                        if (Team != null && Team.TeamId != value)
                        {
                            Team = null;
                        }
                        _teamId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _teamId;
    
        public virtual Nullable<int> ProjectManagerId
        {
            get { return _projectManagerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_projectManagerId != value)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                        _projectManagerId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _projectManagerId;

        #endregion
        #region Navigation Properties
    
        public virtual Team Team
        {
            get { return _team; }
            set
            {
                if (!ReferenceEquals(_team, value))
                {
                    var previousValue = _team;
                    _team = value;
                    FixupTeam(previousValue);
                }
            }
        }
        private Team _team;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    var newCollection = new FixupCollection<Task>();
                    newCollection.CollectionChanged += FixupTasks;
                    _tasks = newCollection;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    var previousValue = _tasks as FixupCollection<Task>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    var newValue = value as FixupCollection<Task>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTasks;
                    }
                }
            }
        }
        private ICollection<Task> _tasks;
    
        public virtual ICollection<Version> Versions
        {
            get
            {
                if (_versions == null)
                {
                    var newCollection = new FixupCollection<Version>();
                    newCollection.CollectionChanged += FixupVersions;
                    _versions = newCollection;
                }
                return _versions;
            }
            set
            {
                if (!ReferenceEquals(_versions, value))
                {
                    var previousValue = _versions as FixupCollection<Version>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupVersions;
                    }
                    _versions = value;
                    var newValue = value as FixupCollection<Version>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupVersions;
                    }
                }
            }
        }
        private ICollection<Version> _versions;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupTeam(Team previousValue)
        {
            if (previousValue != null && previousValue.Projects.Contains(this))
            {
                previousValue.Projects.Remove(this);
            }
    
            if (Team != null)
            {
                if (!Team.Projects.Contains(this))
                {
                    Team.Projects.Add(this);
                }
                if (TeamId != Team.TeamId)
                {
                    TeamId = Team.TeamId;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Projects.Contains(this))
            {
                previousValue.Projects.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Projects.Contains(this))
                {
                    User.Projects.Add(this);
                }
                if (ProjectManagerId != User.UserId)
                {
                    ProjectManagerId = User.UserId;
                }
            }
            else if (!_settingFK)
            {
                ProjectManagerId = null;
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.Project = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                }
            }
        }
    
        private void FixupVersions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Version item in e.NewItems)
                {
                    item.Project = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Version item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                }
            }
        }

        #endregion
    }
}
